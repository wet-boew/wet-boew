<?xml version="1.0" encoding="UTF-8"?>
<project name="build-tasks" default="default" basedir=".">
	<dirname property="tasks.basedir" file="${ant.file.build-tasks}"/>
	<property file="${tasks.basedir}/build-tasks.properties"/>
	
	<!-- ant contribs task definition  -->
	<path id="antcontrib.classpath">
		<pathelement location="${antcontribs.jar}" />
	</path> 
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath refid="antcontrib.classpath" />
	</taskdef>
	
	<target name="-init" depends="-build-jruby">
		<mkdir dir="${build.dir}"/>
	</target>
	
	<!-- yui-compressor task definition  -->
	<path id="yui.classpath">
		<pathelement location="${yui-compressor.jar}" />
		<pathelement location="${yui-compressor-ant-task.jar}" />
	</path>
	<taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
		<classpath refid="yui.classpath" />
	</taskdef>
	<!-- css embed Base64Encode images task definition -->
	<path id="cssurlembed.classpath">
		<pathelement location="${cssurlembed.jar}" />
	</path>
	<taskdef name="cssurlembed" classname="net.nczonline.web.cssembed.CSSEmbedTask">
		<classpath refid="cssurlembed.classpath" />
	</taskdef>
	
	<!-- JSHint Ant task definition -->
	<path id="jshint.classpath">
		<pathelement location="${jshint.jar}" />
	</path>
	<taskdef name="jshint" classname="com.philmander.jshint.JsHintAntTask">
		<classpath refid="jshint.classpath" />
	</taskdef>
	
	<!-- Include the compiled jruby.jar file -->
	<path id="jruby.classpath">
		<fileset dir="${lib.dir}">
			<include name="${jruby.jar}"/>
		</fileset>
	</path>	

	<!-- Include jruby + gems (compass + sass) -->
	<target name="-build-jruby" depends="-jruby.jar.check" unless="jruby.jar.exists">
		<mkdir dir="${lib.dir}/jruby-compiled" />
		<delete dir="${lib.dir}/vendors-${jruby.depends}" />
		<get src="http://jruby.org.s3.amazonaws.com/downloads/${jruby.version}/jruby-complete-${jruby.version}.jar" dest="${lib.dir}/jruby-complete-${jruby.version}.jar" skipexisting="true"/>
		<get src="http://production.cf.rubygems.org/gems/${sass.gem}" dest="${gem.dir}/${sass.gem}" skipexisting="true"/>
		<get src="http://production.cf.rubygems.org/gems/${chunky_png.gem}" dest="${gem.dir}/${chunky_png.gem}" skipexisting="true"/>
		<get src="http://production.cf.rubygems.org/gems/${fssm.gem}" dest="${gem.dir}/${fssm.gem}" skipexisting="true"/>
		<get src="http://production.cf.rubygems.org/gems/${compass.gem}" dest="${gem.dir}/${compass.gem}" skipexisting="true"/>
		<java jar="${lib.dir}/jruby-complete-${jruby.version}.jar" fork="true">
			<arg line="-S gem install -i &quot;${lib.dir}/vendors-${jruby.depends}&quot; &quot;${gem.dir}/${sass.gem}&quot; &quot;${gem.dir}/${chunky_png.gem}&quot; &quot;${gem.dir}/${fssm.gem}&quot; &quot;${gem.dir}/${compass.gem}&quot;"/>
		</java>
		<exec executable="jar" dir="${lib.dir}/">
			<arg line="-uf jruby-complete-${jruby.version}.jar -C vendors-${jruby.depends} ." />
		</exec>
		<move file="${lib.dir}/jruby-complete-${jruby.version}.jar" tofile="${lib.dir}/${jruby.jar}"/>
		<delete dir="${gem.dir}" />
	</target>

	<target name="-jruby.jar.check">
		<condition property="jruby.jar.exists">
			<available file="${lib.dir}/${jruby.jar}" type="file"/>
		</condition>
	</target>
	
	<!-- Compile all of the SCSS files into their CSS counterparts "ant compile.sass" -->
	<target name="compile.sass">
		<antcall target="call.sass">
			<param name="command" value="compile"/>
		</antcall>
		<echo level="info" message="---Converted CSS SCSS Files into CSS---"/>
	</target>
	
	<target name="call.sass">
		<java classname="org.jruby.Main" fork="true" failonerror="true" classpathref="jruby.classpath">
			<arg path="${tasks.basedir}/compile.rb"/>
			<arg path="${lib.dir}/vendors-${jruby.depends}/gems/"/>
			<arg value="${command}"/>
			<arg path="${src.dir}"/>
		</java>
	</target>
	
	<!-- Watch for any polling changes in the SCSS directory "ant watch.sass" -->
	<target name="watch.sass">
		<antcall target="call.sass">
			<param name="command" value="watch"/>
		</antcall>
		<echo level="info" message="---Watching for SCSS Changes in CSS Directory---"/>
	</target>
	
	<target name="-jshint">
		<jshint dir="${src.dir}" fail="${jshint.failbuild}" globalsFile="${jshint.globals.file}">
			<report type="xml" destfile="${build.dir}/jshint.out.xml" />
			<include name="**/*.js"/>
			<exclude name="**/*.min.js"/>
		</jshint>
	</target>
	
	<target name="-resolve-css-imports">
		<antcall target="-recurse" inheritAll="false">
			<param name="file.recurse" value="${file}"/>
			<param name="topfile" value="${topfile}"/>
		</antcall>
	</target>

	<target name="-recurse">
        <property name="charset_regexp" value="@charset\s*?['&quot;]utf-8['&quot;]\s*?;" />
        <property name="url_regexp" value="url\(\s*?['&quot;]\s*?(.*)?['&quot;]\s*?\s*?\)" />
        <property name="import_regexp" value="@import\s*?${url_regexp}\s*?;?" />
		<fixcrlf file="${file.recurse}"/>
		<!-- Removes the charset directive if not in a core file -->
		<if>
			<not>
				<equals arg1="${topfile}" arg2="true"/>
			</not>
			<then>
                <replaceregexp file="${file.recurse}" match="${charset_regexp}" replace=""/>
			</then>
		</if>

		<loadfile property="src" srcfile="${file.recurse}" encoding="utf8"/>
        <!--Merge imported stylesheets-->
        <for delimiter="${line.separator}" param="currline" list="${src}">
			<sequential>
                <propertyregex regexp="${import_regexp}" property="import" select="\0" input="@{currline}" global="true" casesensitive="true" override="true"/>
				<if>
					<isset property="import"/>
					<then>
                        <propertyregex regexp="${import_regexp}" property="import.file.name" select="\1" input="${import}" casesensitive="true" override="true"/>
						<dirname property="import.file.root" file="${file.recurse}"/>
						<property name="import.file" value="${import.file.root}/${import.file.name}"/>
						<antcall target="-resolve-css-imports" inheritAll="false">
							<param name="file" value="${import.file}"/>
							<param name="topfile" value="false"/>
						</antcall>
						<loadfile property="imported" srcfile="${import.file}"/>
						<replace file="${file.recurse}" token="${import}" value="${imported}"/>
						<var name="import.file.root" unset="true"/>
                        <var name="import.file.name" unset="true"/>
						<var name="import.file" unset="true"/>
						<var name="imported" unset="true"/>
                        <var name="import" unset="true"/>
					</then>
				</if>
			</sequential>
		</for>
		<var name="src" unset="true"/>
        <var name="file.recurse" unset="true"/>
	</target>
	
	<target name="clean-css">
		<delete dir="${src.dir}/css" />
	</target>
  
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>
</project>