<?xml version="1.0" encoding="UTF-8"?>
<project name="build-tasks" default="default" basedir=".">
	<dirname property="tasks.basedir" file="${ant.file.build-tasks}"/>
	<property file="${tasks.basedir}/build-tasks.properties"/>

	<!-- Version and build time-->
	<property name="wet-boew-build.version" value="v3.1.4-development"/>
	<tstamp>
		<format property="wet-boew-build.starttime" pattern="yyyy-MM-dd hh:mm aa z" locale="en,CA" timezone="America/Toronto" />
	</tstamp>

	<!-- ant contribs task definition  -->
	<path id="antcontrib.classpath">
		<pathelement location="${antcontribs.jar}" />
	</path>
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath refid="antcontrib.classpath" />
	</taskdef>

	<extension-point name="-init"/>

	<!-- yui-compressor task definition  -->
	<path id="yui.classpath">
		<pathelement location="${yui-compressor.jar}" />
		<pathelement location="${yui-compressor-ant-task.jar}" />
	</path>
	<taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
		<classpath refid="yui.classpath" />
	</taskdef>
	<!-- css embed Base64Encode images task definition -->
	<path id="cssurlembed.classpath">
		<pathelement location="${cssurlembed.jar}" />
	</path>
	<taskdef name="cssurlembed" classname="net.nczonline.web.cssembed.CSSEmbedTask">
		<classpath refid="cssurlembed.classpath" />
	</taskdef>

	<!-- JSHint Ant task definition -->
	<path id="jshint.classpath">
		<pathelement location="${jshint.jar}" />
	</path>
	<taskdef name="jshint" classname="com.philmander.jshint.JsHintAntTask">
		<classpath refid="jshint.classpath" />
	</taskdef>

	<!-- Include jruby + gems (compass + sass) -->
	<target name="-build-jruby" extensionOf="-init" depends="-jruby.jar.check" unless="jruby.jar.exists">
		<mkdir dir="${lib.dir}/jruby-compiled" />
		<parallel>
			<get src="http://jruby.org.s3.amazonaws.com/downloads/${jruby.version}/${jruby.jar}" dest="${lib.dir}/${jruby.jar}" skipexisting="true"/>
			<get src="http://production.cf.rubygems.org/gems/${sass.gem}" dest="${gem.dir}/${sass.gem}" skipexisting="true"/>
			<get src="http://production.cf.rubygems.org/gems/${chunky_png.gem}" dest="${gem.dir}/${chunky_png.gem}" skipexisting="true"/>
			<get src="http://production.cf.rubygems.org/gems/${fssm.gem}" dest="${gem.dir}/${fssm.gem}" skipexisting="true"/>
			<get src="http://production.cf.rubygems.org/gems/${compass.gem}" dest="${gem.dir}/${compass.gem}" skipexisting="true"/>
		</parallel>
		<parallel>
			<java jar="${lib.dir}/${jruby.jar}" fork="true">
				<arg line="-S gem install -i &quot;${lib.dir}/vendors-${jruby.depends}&quot; &quot;${gem.dir}/${sass.gem}&quot; --local -f"/>
			</java>
			<java jar="${lib.dir}/${jruby.jar}" fork="true">
				<arg line="-S gem install -i &quot;${lib.dir}/vendors-${jruby.depends}&quot; &quot;${gem.dir}/${chunky_png.gem}&quot; --local -f"/>
			</java>
			<java jar="${lib.dir}/${jruby.jar}" fork="true">
				<arg line="-S gem install -i &quot;${lib.dir}/vendors-${jruby.depends}&quot; &quot;${gem.dir}/${fssm.gem}&quot; --local -f"/>
			</java>
			<java jar="${lib.dir}/${jruby.jar}" fork="true">
				<arg line="-S gem install -i &quot;${lib.dir}/vendors-${jruby.depends}&quot; &quot;${gem.dir}/${compass.gem}&quot; --local -f"/>
			</java>
		</parallel>
	</target>

	<target name="-jruby.jar.check">
		<checksum file="${tasks.basedir}/build-tasks.properties" property="jruby.depends"/>
		<condition property="jruby.jar.exists">
			<and>
				<available file="${lib.dir}/${jruby.jar}" type="file"/>
				<available file="${lib.dir}/vendors-${jruby.depends}" type="dir"/>
			</and>
		</condition>
	</target>

	<!-- Compile all of the SCSS files into their CSS counterparts "ant compile.sass" -->
	<target name="compile.sass">
		<antcall target="call.sass">
			<param name="command" value="compile"/>
		</antcall>
		<echo level="info" message="---Converted CSS SCSS Files into CSS---"/>
	</target>

	<target name="call.sass">
		<java fork="true" failonerror="true" jar="${lib.dir}/${jruby.jar}">
			<arg value="--1.8"/>
			<arg path="${tasks.basedir}/compile.rb"/>
			<arg path="${lib.dir}/vendors-${jruby.depends}/gems/"/>
			<arg value="${command}"/>
			<arg path="${src.dir}"/>
			<arg value="${dist.dir}/css"/>
			<arg value="${isdebugging}"/>
		</java>
	</target>

	<target name="usedebugging">
		<property name="isdebugging" value="true"/>
	</target>

	<!-- Watch for any polling changes in the SCSS directory "ant watch.sass" -->
	<target name="watch.sass">
		<antcall target="call.sass">
			<param name="command" value="watch"/>
		</antcall>
		<echo level="info" message="---Watching for SCSS Changes in CSS Directory---"/>
	</target>

	<target name="-jshint">
		<jshint dir="${src.dir}" fail="${jshint.failbuild}" globalsFile="${jshint.globals.file}" options="strict:false">
			<report type="xml" destfile="${src.dir}/jshint.out.xml" />
			<include name="**/*.js"/>
			<exclude name="**/*.min.js"/>
			<exclude name="jquerymobile/jquery.mobile.js"/>
			<exclude name="jquerymobile/jquery.mobile-ie.js"/>
			<exclude name="polyfills/datalist.js"/>
			<exclude name="polyfills/detailssummary.js"/>
			<exclude name="polyfills/html5shiv.js"/>
			<exclude name="polyfills/localstorage.js"/>
			<exclude name="polyfills/sessionstorage.js"/>
			<exclude name="polyfills/slider.js"/>
			<exclude name="dependencies/browsertweaks.js"/>
			<exclude name="dependencies/colorbox.js"/>
			<exclude name="dependencies/datatables.js"/>
			<exclude name="dependencies/easytabs.js"/>
			<exclude name="dependencies/hoverintent.js"/>
			<exclude name="dependencies/json.js"/>
			<exclude name="dependencies/matchMedia.js"/>
			<exclude name="dependencies/metadata.js"/>
			<exclude name="dependencies/outside.js"/>
			<exclude name="dependencies/pie.js"/>
			<exclude name="dependencies/prettify.js"/>
			<exclude name="dependencies/prettify/**/*.js"/>
			<exclude name="dependencies/excanvas.js"/>
			<exclude name="dependencies/flot.js"/>
			<exclude name="dependencies/flotPie.js"/>
			<exclude name="dependencies/resize.js"/>
			<exclude name="dependencies/validate.js"/>
			<exclude name="dependencies/validateAdditional.js"/>
			<exclude name="dependencies/xregexp.js"/>
			<exclude name="dependencies/openlayers.js"/>
			<exclude name="dependencies/proj4js.js"/>
			<exclude name="dependencies/simplePagination.js"/>
		</jshint>
	</target>

	<!-- Zero units can be removed after JQM 1.3.1 as PR fixed these -->
	<property name="csslint.ignores.jquery.mobile" value="import,compatible-vendor-prefixes,vendor-prefix,adjoining-classes,unique-headings,qualified-headings,duplicate-properties,box-sizing,zero-units,outline-none,known-properties,box-model,text-indent,unqualified-attributes,universal-selector,display-property-grouping,overqualified-elements"/>
	<property name="csslint.ignores" value="ids,important,qualified-headings,universal-selector,unqualified-attributes,star-property-hack,unique-headings,adjoining-classes,floats,overqualified-elements,font-sizes,regex-selectors,duplicate-properties,box-sizing,duplicate-background-images,fallback-colors"/>
	<property name="csslint.errors" value="outline-none"/>

	<target name="csslint" description="Runs CSSLint on CSS produced by the project's Sass files and outputs results to the console" depends="usedebugging, prepare-files">
		<apply executable="java" failonerror="false" parallel="false">
			<fileset dir="${dist.dir}/css">
				<include name="*.css"/>
				<exclude name="*.min.css"/>
				<exclude name="*-min.css"/>
			</fileset>
			<arg value="-jar"/>
			<arg path="${lib.dir}/js.jar"/>
			<arg path="${lib.dir}/csslint-rhino.js" />

			<!-- your customized arguments go here -->
			<arg value="--format=compact"/>
			<arg value="--ignore=${csslint.ignores},${csslint.ignores.jquery.mobile}"/>
			<arg value="--error=${csslint.errors}"/>
			<srcfile/>
		</apply>
	</target>

	<target name="clean">
		<delete dir="${dist.dir}" />
	</target>

	<extension-point name="build" depends="prepare-files, encode-images, compress, finalize" description="Core build task. Subprojects should subscrib to the 'prepare-files' and 'compress'" />

	<extension-point name="debug" depends="usedebugging, prepare-files, encode-images, fake-compress, finalize" description="Build that produces the CSS and JS files unminified but with the same file name as the production ones" />

	<extension-point name="prepare-files" depends="-init" />

	<extension-point name="encode-images" depends="prepare-files" />

	<target name="encode-css" extensionOf="encode-images" depends="-base64-encode"/>

	<extension-point name="compress" depends="encode-images, -minify" />

	<extension-point name="fake-compress" depends="encode-images, -rename-to-min" />

	<extension-point name="finalize"/>

	<extension-point name="test" />

	<target name="lint" extensionOf="test" depends="-jshint, csslint"/>

	<target name="-base64-encode">
		<property name="image.dir" location="${dist.dir}/images"/>

		<cssurlembed skipMissing="true" root="${image.dir}">
			<fileset dir="${dist.dir}/css">
				<include name="*.css"/>
				<exclude name="*ie.css"/>
				<!-- Because of themometer images -->
				<exclude name="util.css"/>
			</fileset>
		</cssurlembed>

		<property name="jquerymobile.dir" location="${src.dir}/jquerymobile"/>
		<cssurlembed skipMissing="true" root="${jquerymobile.dir}">
			<fileset dir="${dist.dir}/css">
				<include name="*.css"/>
				<exclude name="*ie.css"/>
				<!-- Because of themometer images -->
				<exclude name="util.css"/>
			</fileset>
		</cssurlembed>
	</target>

	<target name="-minify">
		<yui-compressor warn="false" munge="true" preserveAllSemiColons="false" fromDir="${dist.dir}" toDir="${dist.dir}" charset="utf-8">
			<include name="**/*.css" />
			<include name="**/*.js" />
			<exclude name="**/*-min.css" />
			<exclude name="**/settings.js" />
			<exclude name="**/settings-ie.js" />
			<exclude name="**/*-min.js" />
			<exclude name="**/*.min.js" />
		</yui-compressor>
		<delete>
			<fileset dir="${dist.dir}">
				<include name="**/*.css" />
				<include name="**/*.js" />
				<exclude name="**/settings.js" />
				<exclude name="**/settings-ie.js" />
				<exclude name="**/*-min.css" />
				<exclude name="**/*-min.js" />
				<exclude name="**/*.min.js" />
			</fileset>
		</delete>
	</target>

	<target name="-rename-to-min">
		<move todir="${dist.dir}" encoding="UTF-8">
			<fileset dir="${dist.dir}">
				<include name="**/*.js" />
				<exclude name="**/settings.js" />
				<exclude name="**/settings-ie.js" />
				<exclude name="**/*-min.js" />
				<exclude name="**/*.min.js" />
			</fileset>
			<globmapper from="*.js" to="*-min.js"/>
		</move>
		<move todir="${dist.dir}" encoding="UTF-8">
			<fileset dir="${dist.dir}">
				<include name="**/*.css" />
				<exclude name="**/*-min.css" />
			</fileset>
			<globmapper from="*.css" to="*-min.css"/>
		</move>
	</target>

	<target name="-copy-css" depends="compile.sass"/>

	<target name="-copy-jquery-mobile">
		<copy todir="${dist.dir}/css/images">
			<fileset dir="${src.dir}/jquerymobile/images-ie"/>
		</copy>
	</target>

	<fileset id="jsfiles" dir="${src.dir}">
		<include name="**/*.js"/>
	</fileset>
	<target name="-copy-js">
		<fixcrlf srcdir="${src.dir}" includes="**/*.js" encoding="UTF-8" outputencoding="UTF-8" tab="add" tablength="4" fixlast="false"/>
		<copy todir="${dist.dir}" encoding="UTF-8">
			<fileset refid="jsfiles" />
		</copy>
		<!-- Temporary fix - to be replaced by modern and old IE targeted output -->
		<copy file="${dist.dir}/js/theme.js" tofile="${dist.dir}/js/theme-ie.js" failonerror="false"/>
	</target>

	<target name="-copy-images">
		<copy todir="${dist.dir}/images">
			<fileset dir="${src.dir}/images" />
		</copy>
	</target>

	<target name="-update-headers" extensionOf="finalize">
		<echo>Setting build timestamp to '${wet-boew-build.starttime}'</echo>
		<replace dir="${dist.dir}" encoding="UTF-8">
			<include name="**/*.js"/>
			<include name="**/*.css"/>
			<replacefilter token="@wet-boew-build.version@" value="${wet-boew-build.version} Build: ${wet-boew-build.starttime}"/>
		</replace>
	</target>
</project>
