Packaging, staging, and releasing Maven Artifacts for WET
=========================================================

Prerequisites (assuming Windows)
================================
These steps only need to be done once:
1.  Get latest version of Maven (maven.apache.org) and install it.  It's generally a simple download & extract, just like Ant.
2.  Create a Maven settings.xml file under your <user home>/.m2 folder (create it if it doesn't exist).  Contents of the settings.xml file should be like this (insert the proper password):
<settings>
  <servers>
    <server>
      <id>sonatype-nexus-snapshots</id>
      <username>wet-admin</username>
      <password>INSERT_PASSWORD_HERE</password>
    </server>
    <server>
      <id>sonatype-nexus-staging</id>
      <username>wet-admin</username>
      <password>INSERT_PASSWORD_HERE</password>
    </server>
  </servers>
</settings>

3.  Download and install Gpg4win.
4.  Using Kleopatra (comes with Gpg4win), import the WET private key.  Instructions can be found here: http://www.gpg4win.org/doc/en/gpg4win-compendium_25.html

WET Maven Artifact Generation
=============================
The process has been broken down into these basic steps:
0.  WET Ant build is first run, making dist folder available.
1.  Package and stage by running 'mavenStage.cmd'.  It will prompt for the required arguments if you don't give it any.
	a. Using the stuff from dist, script creates the WAR packages for each of the Maven overlays.
	b. During this script, you will be prompted to enter the PGP passphrase for signing the artifacts.  The script will error out if you provide the wrong password.
	c. These WARs are sent up to the Sonatype repository (this part takes a while!)
	d. Using the contents of each of the WAR overlays and theme demo folders, script creates a set of test folders in the location of your choosing (recommend outside your Git repo)
3.  If desired, a quick smoke test can be done by accessing the test files created in Step 1c.
4.  Once satisfied, release the artifacts by running 'mavenRelease.cmd'.  Be sure.  Once released to Maven Central, you can't UNrelease!
5.  Commit modified Maven files that now contain new version information, along with the rest of the things you commit.
Exceptional flow:  If something goes really wrong and smoke test convinces you to abort entirely, you should run the 'mavenDrop.cmd' script to drop the Sonatype repository.



Comments from Eric Ehret:
=========================
- If something goes wrong during the 'mavenStage.cmd' script, 
- I would suggest to put the 'Maven' folder in the '-dist' tag along with the compiled files, in case anyone wants to run the Maven build themselves.

- Right now, the relative paths of the files needed to produce the Maven artifacts are in the Maven pom.xml files.  When I get more time, I would like to make this a little more flexible so key paths can be passed in dynamically.

- If the contents of any of the themes is altered significantly  i.e. different folders are included, then obviously someone will need to edit the Maven pom.xml files to point to the new folders.

- Along the same line, if a new theme is added, the Maven files will need to be updated.

- There might be ways we can further simplify some of this.  If something strikes you as odd, let me know... it could be one of my assumptions is incorrect, and we can adjust.