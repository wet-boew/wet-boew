Packaging, staging, and releasing Maven Artifacts for WET
=========================================================

Prerequisites (assuming Windows)
================================
These steps only need to be done once:
1.  Get latest version of Maven (maven.apache.org) and install it.  Download & extract, just like Ant, and add the Maven/bin folder to your path.
2.  Create a Maven settings.xml file under your <user home>/.m2 folder (create it if it doesn't exist).  Contents of the settings.xml file should be like this (insert the proper password):
<settings>
  <servers>
    <server>
      <id>sonatype-nexus-snapshots</id>
      <username>wet-admin</username>
      <password>INSERT_PASSWORD_HERE</password>
    </server>
    <server>
      <id>sonatype-nexus-staging</id>
      <username>wet-admin</username>
      <password>INSERT_PASSWORD_HERE</password>
    </server>
  </servers>
</settings>

3.  Download and install Gpg4win.
4.  Using Kleopatra (comes with Gpg4win), import the WET private key.  Instructions can be found here: http://www.gpg4win.org/doc/en/gpg4win-compendium_25.html

WET Maven Artifact Generation
=============================
The process has been broken down into these basic steps:
Pre:  WET Ant build is first run, making dist folder available.

1.  Package and stage by running 'mavenStage.cmd'.  It will prompt for the required arguments if you don't give it any.
	a. Using the stuff from dist, script creates the WAR packages for each of the Maven overlays.
	b. During this script, you will be prompted to enter the PGP passphrase for signing the artifacts.  The script will error out if you provide the wrong password.
	c. These WARs are uploaded to the Sonatype Nexus repository (this part takes a while!)
	d. Using the contents of each of the WAR overlays and theme demo folders, script creates a set of test folders in the location of your choosing (recommend outside your Git repo)
3.  If desired, a quick smoke test can be done by accessing the test files created in Step 1d.
4.  Once satisfied, release the artifacts by running 'mavenRelease.cmd'.  Be sure.  Once released to Maven Central, you can't UNrelease!
5.  Commit modified Maven files that now contain new version information, along with the rest of the things you commit.
Exceptional flow:  If something goes really wrong and smoke test convinces you to abort entirely, you should run the 'mavenDrop.cmd' script to drop the Sonatype repository.

Post: You can run setVersion.cmd afterward, to set the prerelease version of the next release.  Maven has a convention where prerelease version has -SNAPSHOT appended.  I suggest doing that.  We could also alter the setVersion.cmd script to use a flag to drive whether -SNAPSHOT gets appended.  I'm open to suggestions.
You can use setVersion.cmd any time you create a branch for a new version, to set the version of the Maven artifacts for that branch.  This could be a useful hook for further automation.


Additional information & comments from Eric Ehret
=================================================
Currently the Maven projects are configured to be used in both of the following scenarios:
1.  As part of your release branch, with the 'maven' folder residing under /build
2.  As part of the dist tag, with 'maven' folder being a sibling of 'demo' and 'dist'.
In the first case, the relative paths used by Maven will be controlled by the mavenStage.cmd script.
In the second case, relative paths will be governed by defaults that reside within the Maven pom file.
Both of the above can be configured differently if you have a different preference.  Just let me know.

- If the contents of any of the themes is altered significantly  i.e. different folders are included, then obviously someone will need to edit the Maven pom.xml files to point to the new folders.

- Along the same line, if a new theme is added, the Maven files will need to be updated.

- There might be ways we can further simplify some of this.  If something strikes you as odd, let me know... it could be one of my assumptions is incorrect, and we can adjust.